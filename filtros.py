# -*- coding: utf-8 -*-
"""Filtros | CG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gIUK6BVdZgWSA-XjX21ZwhJiEfua2R8q
"""

from PIL import Image, ImageFilter, ImageChops
import numpy as np
import random
import math

"""# Filtros Morfológicos
Alteram apenas as **cores** da imagem

## Filtro negativo
"""

def filtro_negativo(img):
    matriz = img.load()
    largura, altura = img.size
    for i in range(largura):
        for j in range(altura):
            pixel = ((255 - matriz[i,j][0]), (255 - matriz[i,j][1]), (255 - matriz[i,j][2]))
            matriz[i,j] = pixel
    return img

"""## Filtro de correção de Gama"""

def filtro_gama(img, fator=40):
    matriz = img.load()
    largura, altura = img.size
    def gama(pixel, fator):
        return int(pow((pixel / 255), fator) * 255)
    for i in range(largura):
        for j in range(altura):
            pixel = (gama(matriz[i,j][0], fator), gama(matriz[i,j][1], fator), gama(matriz[i,j][2], fator))
            matriz[i,j] = pixel
    return img

"""## Filtro Transformação Logarítma"""

def filtro_logaritmo(img):
    matriz = img.load()
    largura, altura = img.size
    def transLog(pixel):
        c = 255 / math.log(256)
        return int(c * math.log(1 + pixel))
    for i in range(largura):
        for j in range(altura):
            pixel = (transLog(matriz[i,j][0]), transLog(matriz[i,j][1]), transLog(matriz[i,j][2]))
            matriz[i,j] = pixel
    return img

"""## Filtro em Escala de Cinza"""

def filtro_escala_cinza(img):
    matriz = img.load()
    largura, altura = img.size
    for i in range(largura):
        for j in range(altura):
            media = int((matriz[i,j][0] + matriz[i,j][1] + matriz[i,j][2]) / 3)
            pixel = (media, media, media)
            matriz[i,j] = pixel
    return img

"""## Filtro Preto e Branco"""

def filtro_preto_branco(img):
    matriz = img.load()
    largura, altura = img.size
    for i in range(largura):
        for j in range(altura):
            media = int((matriz[i,j][0] + matriz[i,j][1] + matriz[i,j][2]) / 3)
            if media < 128:
                pixel = (0, 0, 0)
            else:
                pixel = (255, 255, 255)
            matriz[i,j] = pixel
    return img

"""# Filtros Espaciais
Alteram a **cor** e o **espaço** da imagem

## Filtro Blur (Desfoque)
"""

def filtro_blur1(img):
    size = (3, 3)
    mask = (1, 1, 1, 1, 1, 1, 1, 1, 1)
    scale = 10
    offset = -10
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Blur 2"""

def filtro_blur2(img):
    size = (3, 3)
    mask = (1, 1, 1, 1, 1, 1, 1, 1, 1)
    mask = tuple(x / 9 for x in mask)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Blur 3

"""

def filtro_blur3(img):
    size = (3, 3)
    mask = (1, 2, 1, 2, 4, 2, 1, 2, 1)
    mask = tuple(x / 16 for x in mask)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Blur 4

"""

def filtro_blur4(img):
    size = (5, 5)
    mask = (1, 4, 6, 4, 1, 4, 16, 24, 16, 4, 6, 24, 36, 24, 6, 4, 16, 24, 16, 4, 1, 4, 6, 4, 1)
    mask = tuple(x / 256 for x in mask)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""## Filtro Sharpen (Nitidez)"""

def filtro_sharpen(img):
    size = (3, 3)
    mask = (0, -1, 0, -1, 5, -1, 0, -1, 0)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""## Filtro de detecção de borda (Contorno)"""

def filtro_borda1(img):
    size = (3, 3)
    mask = (-1, -1, -1, -1, 8, -1, -1, -1, -1)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Borda 2"""

def filtro_borda2(img):
    size = (3, 3)
    mask = (1, 0, -1, 0, 0, 0, -1, 0, 1)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Borda 3

"""

def filtro_borda3(img):
    size = (3, 3)
    mask = (0, 1, 0, 1, -4, 1, 0, 1, 0)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro de Borda 4


"""

def filtro_borda4(img):
    size = (3, 3)
    mask = (-1, -1, -1, -1, 11, -2, -2, -2, -2)
    scale = 1
    offset = 0
    kernel = ImageFilter.Kernel(size, mask, scale, offset)
    return img.filter(kernel)

"""### Filtro Sobel"""

def filtro_sobel(img):
    img = filtro_escala_cinza(img)
    kernel_sobel_x = ImageFilter.Kernel((3, 3), (-1, 0, 1, -2, 0, 2, -1, 0, 1), 1)
    kernel_sobel_y = ImageFilter.Kernel((3, 3), (-1, -2, -1, 0, 0, 0, 1, 2, 1), 1)
    img_sobel_x = img.filter(kernel_sobel_x)
    img_sobel_y = img.filter(kernel_sobel_y)
    img_sobel = ImageChops.add(img_sobel_x, img_sobel_y)
    return img_sobel

"""### Filtro Laplaciano"""

def filtro_laplaciano1(img):
    img = filtro_escala_cinza(img)
    return img.filter(ImageFilter.Kernel((3, 3), (0, 1, 0, 1, -4, 1, 0, 1, 0), 1))

def filtro_laplaciano2(img):
    img = filtro_escala_cinza(img)
    return img.filter(ImageFilter.Kernel((3, 3), (1, 1, 1, 1, -8, 1, 1, 1, 1), 1))

"""### Filtro Piwwit"""

def filtro_piwwit(img):
    img = filtro_escala_cinza(img)
    kernel_piwwit_x = ImageFilter.Kernel((3, 3), (-1, 0, 1, -1, 0, 1, -1, 0, 1), 1)
    kernel_piwwit_y = ImageFilter.Kernel((3, 3), (-1, -1, -1, 0, 0, 0, 1, 1, 1), 1)
    img_piwwit_x = img.filter(kernel_piwwit_x)
    img_piwwit_y = img.filter(kernel_piwwit_y)
    img_piwwit = ImageChops.add(img_piwwit_x, img_piwwit_y)
    return img_piwwit

"""## Filtro limpeza de ruídos

### Salt and Pepper
Aplicando ruído preto e branco na imagem
"""

def aplicar_ruido(img, prob):
    output = np.array(img)
    for i in range(output.shape[0]):
        for j in range(output.shape[1]):
            rand = random.random()
            if rand < prob:
                output[i][j] = 0
            elif rand > 1 - prob:
                output[i][j] = 255
    return Image.fromarray(output)